.component {
	--sponsor-grid-column-gap: var(--size-large);
	--sponsor-grid-current-item-min-width: var(--sponsor-grid-item-min-width);

	display: grid;
	gap: var(--size-medium);
	column-gap: var(--sponsor-grid-column-gap);

	// Determine how many columns to add.
	--sponsor-grid-calc-total-gap: calc(calc(var(--sponsor-grid-max-columns) - 1) * var(--sponsor-grid-column-gap));
	--sponsor-grid-calc-max-width: calc((100% - var(--sponsor-grid-calc-total-gap)) / var(--sponsor-grid-max-columns));
	--sponsor-grid-calc-dynamic-columns: repeat(
		auto-fill,
		minmax(max(var(--sponsor-grid-current-item-min-width), var(--sponsor-grid-calc-max-width)), 1fr)
	);

	grid-template-columns: var(--sponsor-grid-fixed-template-columns) var(--sponsor-grid-calc-dynamic-columns);

	// Make the children consume the full width.
	> * {
		width: 100%;
	}

	// Use mobile min item width for mobile.
	@include for-mobile {
		--sponsor-grid-current-item-min-width: var(--sponsor-grid-item-min-width-mobile);
	}
}
